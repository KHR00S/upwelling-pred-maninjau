# Panggil library yang diperlukan
library(tseries)
# Jalankan ADF test untuk setiap variabel numerik pada data_ta_transformasi
adf_results <- lapply(data_ta_transformasi %>% select(where(is.numeric)), adf.test)
# Panggil library yang diperlukan
library(tseries)
# Jalankan ADF test untuk setiap variabel numerik pada data_ta_transformasi
adf_results <- lapply(data_ta_transformasi %>% select(where(is.numeric)), adf.test)
knitr::opts_chunk$set(echo = TRUE)
# Panggil library
library(readr)
# Panggil data dari path yang ditentukan
data_ta <- read.csv("D:/MODELING_ML/GIT/upwelling-pred-maninjau/data/DATA TRAIN.csv", sep = ",")
head(data_ta)
# Ubah kolom DATE menjadi tipe Date dengan format tanggal/bulan/tahun
data_ta$Date <- as.Date(data_ta$Date, format = "%d/%m/%Y")
# Tampilkan beberapa baris pertama dari data untuk memastikan
head(data_ta)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Replace commas with periods and convert numeric columns
data_ta_clean <- data_ta %>%
mutate(across(where(is.character), ~ as.numeric(gsub(",", ".", .))))
# Compute summary statistics using reframe()
stat_summary <- data_ta_clean %>%
select(where(is.numeric)) %>%
reframe(
Variable = names(.),
Min = sapply(., min, na.rm = TRUE),
Median = sapply(., median, na.rm = TRUE),
Mean = sapply(., mean, na.rm = TRUE),
Max = sapply(., max, na.rm = TRUE),
IQR = sapply(., IQR, na.rm = TRUE),
Stdv = sapply(., sd, na.rm = TRUE)
)
# Ubah kolom DATE menjadi tipe Date dengan format tanggal/bulan/tahun
data_ta$Date <- as.Date(data_ta$Date, format = "%d/%m/%Y")
# Tampilkan beberapa baris pertama dari data untuk memastikan
head(data_ta)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Replace commas with periods and convert numeric columns
data_ta_clean <- data_ta %>%
mutate(across(where(is.character), ~ as.numeric(gsub(",", ".", .))))
# Compute summary statistics using reframe()
stat_summary <- data_ta_clean %>%
select(where(is.numeric)) %>%
reframe(
Variable = names(.),
Min = sapply(., min, na.rm = TRUE),
Median = sapply(., median, na.rm = TRUE),
Mean = sapply(., mean, na.rm = TRUE),
Max = sapply(., max, na.rm = TRUE),
IQR = sapply(., IQR, na.rm = TRUE),
Stdv = sapply(., sd, na.rm = TRUE)
)
# Rename variables (adjust based on actual column names)
stat_summary <- stat_summary %>%
mutate(Variable = case_when(
Variable == "TS" ~ "suhu",
Variable == "PRECTOTCORR" ~ "curah.hujan",
Variable == "WS10M" ~ "Kecepatan.Angin",
TRUE ~ Variable
))
# Display the updated summary statistics
stat_summary
# Panggil library yang diperlukan
library(dplyr)
library(ggplot2)
data_ta <- data_ta %>%
filter(!is.na(Date))
# Tambahkan kolom Tahun ke data_ta
data_ta <- data_ta %>%
mutate(Tahun = format(Date, "%Y"))
# Plot boxplot untuk masing-masing variabel per tahun dengan jitter
# Boxplot untuk Kejernihan.Langit per tahun
ggplot(data_ta, aes(x = Tahun, y = PRECTOTCORR)) +
geom_boxplot(outlier.shape = NA) +  # Hapus outliers dari boxplot untuk tidak bertumpuk
geom_jitter(width = 0.2, alpha = 0.5, color = "skyblue") +  # Tambahkan jitter
labs(title = "Boxplot Kejernihan Langit per Tahun", x = "Tahun", y = "Kejernihan Langit") +
theme_minimal()
# Plot boxplot untuk masing-masing variabel per tahun dengan jitter
# Boxplot untuk Kejernihan.Langit per tahun
ggplot(data_ta, aes(x = Tahun, y = TS)) +
geom_boxplot(outlier.shape = NA) +  # Hapus outliers dari boxplot untuk tidak bertumpuk
geom_jitter(width = 0.2, alpha = 0.5, color = "skyblue") +  # Tambahkan jitter
labs(title = "Boxplot Kejernihan Langit per Tahun", x = "Tahun", y = "Kejernihan Langit") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(forecast)
library(ggfortify)
# Ensure numeric conversion for columns
data_ta_clean <- data_ta %>%
mutate(
TS = as.numeric(gsub(",", ".", TS)),
PRECTOTCORR = as.numeric(gsub(",", ".", PRECTOTCORR)),
WS10M = as.numeric(gsub(",", ".", WS10M)),
)
# Create time series objects
suhu <- ts(data_ta_clean$TS, start = c(as.numeric(format(min(data_ta_clean$Date), "%Y")), 1), frequency = 365)
curah_hujan <- ts(data_ta_clean$PRECTOTCORR, start = c(as.numeric(format(min(data_ta_clean$Date), "%Y")), 1), frequency = 365)
kecepatan_angin <- ts(data_ta_clean$WS10M, start = c(as.numeric(format(min(data_ta_clean$Date), "%Y")), 1), frequency = 365)
# Load necessary libraries
library(ggplot2)
library(forecast)
library(ggfortify)
# Ensure numeric conversion for columns
data_ta_clean <- data_ta %>%
mutate(
TS = as.numeric(gsub(",", ".", TS)),
PRECTOTCORR = as.numeric(gsub(",", ".", PRECTOTCORR)),
WS10M = as.numeric(gsub(",", ".", WS10M)),
)
# Create time series objects
suhu <- ts(data_ta_clean$TS, start = c(as.numeric(format(min(data_ta_clean$Date), "%Y")), 1), frequency = 365)
curah_hujan <- ts(data_ta_clean$PRECTOTCORR, start = c(as.numeric(format(min(data_ta_clean$Date), "%Y")), 1), frequency = 365)
kecepatan_angin <- ts(data_ta_clean$WS10M, start = c(as.numeric(format(min(data_ta_clean$Date), "%Y")), 1), frequency = 365)
# Plot time series FOR curah hujan (PRCTOTCORR)
autoplot(suhu) +
labs(
title = "Time Series Plot: suhu (T2M)",
x = "Time",
y = "sumu (T2M)"
) +
theme_minimal()
# Plot time series FOR curah hujan (PRCTOTCORR)
autoplot(curah_hujan) +
labs(
title = "Time Series Plot: curah hujan (PRCTOTCORR)",
x = "Time",
y = "curah hujan (PRCTOTCORR)"
) +
theme_minimal()
# Plot time series for Suhu
autoplot(kecepatan_angin) +
labs(
title = "Time Series Plot: kecepatan angin (WS10M)",
x = "Time",
y = "kecepatan angin (WS10M)"
) +
theme_minimal()
# Load necessary libraries
library(forecast)
library(ggplot2)
library(dplyr)
# Ensure numeric conversion for the relevant columns
data_ta_clean <- data_ta %>%
mutate(
PRECTOTCORR = as.numeric(gsub(",", ".", PRECTOTCORR)),
TS = as.numeric(gsub(",", ".", TS)),
WS10M = as.numeric(gsub(",", ".", WS10M))
)
# Create time series objects with daily frequency (assuming 365 days per year)
ts_curah_hujan <- ts(data_ta_clean$PRECTOTCORR, frequency = 365, start = c(2022, 1))
ts_suhu <- ts(data_ta_clean$TS, frequency = 365, start = c(2022, 1))
ts_kecepatan_angin <- ts(data_ta_clean$WS10M, frequency = 365, start = c(2022, 1))
# Decomposition for Curah Hujan
decompose_curah_hujan <- stl(ts_curah_hujan, s.window = "periodic")
plot(decompose_curah_hujan, main = "Decomposition of Curah Hujan (PRECTOTCORR)")
# Decomposition for Suhu
decompose_suhu <- stl(ts_suhu, s.window = "periodic")
plot(decompose_suhu, main = "Decomposition of Suhu (TS)")
# Decomposition for Kecepatan Angin
decompose_kecepatan_angin <- stl(ts_kecepatan_angin, s.window = "periodic")
plot(decompose_kecepatan_angin, main = "Decomposition of Kecepatan Angin (WS10M)")
library(forecast)
# Menghitung nilai lambda Box-Cox untuk setiap variabel
lambda.curah_hujan <- BoxCox.lambda(data_ta_clean$PRECTOTCORR)
lambda.Suhu <- BoxCox.lambda(data_ta_clean$TS)
lambda.Kecepatan_Angin <- BoxCox.lambda(data_ta_clean$WS10M)
# Membuat data frame untuk menyimpan hasil
lambda_table <- data.frame(
Variable = c("curah.hujan", "Suhu", "Kecepatan.Angin"),
Lambda = c(lambda.curah_hujan, lambda.Suhu, lambda.Kecepatan_Angin)
)
# Menampilkan tabel
print(lambda_table)
# Panggil library yang diperlukan
library(forecast)
library(dplyr)
# Step 1: Konversi kolom menjadi numerik (mengganti koma dengan titik)
data_ta <- data_ta %>%
mutate(
PRECTOTCORR = as.numeric(gsub(",", ".", PRECTOTCORR)) + 1e-6,  # Pastikan positif
TS = as.numeric(gsub(",", ".", TS)) + 1e-6,                   # Pastikan positif
WS10M = as.numeric(gsub(",", ".", WS10M)) + 1e-6             # Pastikan positif
)
# Step 2: Menghitung nilai lambda Box-Cox untuk variabel awal
lambda_awal_curah_hujan <- BoxCox.lambda(data_ta$PRECTOTCORR)
lambda_awal_suhu <- BoxCox.lambda(data_ta$TS)
lambda_awal_kecepatan_angin <- BoxCox.lambda(data_ta$WS10M)
# Step 3: Buat data frame baru dengan transformasi pada setiap variabel
data_ta_transformasi <- data_ta %>%
mutate(
PRECTOTCORR = round((log(PRECTOTCORR) * 1000000000), 1),  # Transformasi dan pembulatan PRECTOTCORR
TS = (TS ^ 3.0) / 1000000,                      # Transformasi dan pembulatan TS
WS10M = round((log(WS10M / 2) * 10), 1)                   # Transformasi dan pembulatan WS10M
)
# Step 4: Menghitung nilai lambda Box-Cox untuk variabel yang sudah ditransformasi
lambda_transformasi_curah_hujan <- BoxCox.lambda(data_ta_transformasi$PRECTOTCORR)
lambda_transformasi_suhu <- BoxCox.lambda(data_ta_transformasi$TS)
lambda_transformasi_kecepatan_angin <- BoxCox.lambda(data_ta_transformasi$WS10M)
# Step 5: Membuat tabel hasil lambda awal dan transformasi
lambda_table <- data.frame(
Variable = c("Curah Hujan (PRECTOTCORR)", "Suhu (TS)", "Kecepatan Angin (WS10M)"),
Lambda_Awal = c(lambda_awal_curah_hujan, lambda_awal_suhu, lambda_awal_kecepatan_angin),
Lambda_Transformasi = c(lambda_transformasi_curah_hujan, lambda_transformasi_suhu, lambda_transformasi_kecepatan_angin)
)
# Step 6: Menampilkan tabel hasil
print("Tabel Hasil Lambda Awal dan Transformasi:")
print(lambda_table)
# Panggil library yang diperlukan
library(tseries)
# Jalankan ADF test untuk setiap variabel numerik pada data_ta_transformasi
adf_results <- lapply(data_ta_transformasi %>% select(where(is.numeric)), adf.test)
# Tampilkan hasil ADF test untuk setiap variabel
for (var_name in names(adf_results)) {
cat("Hasil ADF test untuk variabel:", var_name, "\n")
print(adf_results[[var_name]])
cat("\n\n")
}
library(knitr)
# Buat tabel rekap hasil ADF test
rekap_adf_hasil <- data.frame(
Variabel = c("Kejernihan.Langit", "Suhu", "Kecepatan.Angin"),
DF_Statistic = c(-6.1479, -4.2624, -5.9261),
Lag_Order = c(8, 8, 8),
P_Value = c(0.01, 0.01, 0.01),
Stationarity = c("stationary", "stationary", "stationary")
)
# Tampilkan tabel menggunakan kable untuk format yang lebih rapi
kable(rekap_adf_hasil, caption = "Rekap Hasil ADF Test")
# Panggil library yang diperlukan
library(lmtest)
library(dplyr)
# Tentukan urutan lag (order) yang ingin digunakan dalam uji Granger
lag_order <- 3  # Sesuaikan dengan keperluan analisis Anda
# Lakukan uji Granger Causality antar variabel di data_ta_transformasi
granger_results <- list()
# Daftar pasangan variabel untuk uji kausalitas Granger
variable_pairs <- combn(names(data_ta_transformasi %>% select(where(is.numeric))), 2)
# Loop melalui setiap pasangan variabel
for (i in 1:ncol(variable_pairs)) {
var_x <- variable_pairs[1, i]
var_y <- variable_pairs[2, i]
# Uji apakah var_x menyebabkan var_y
granger_xy <- grangertest(as.formula(paste(var_y, "~", var_x)), order = lag_order, data = data_ta_transformasi)
granger_results[[paste(var_x, "->", var_y)]] <- granger_xy
# Uji apakah var_y menyebabkan var_x
granger_yx <- grangertest(as.formula(paste(var_x, "~", var_y)), order = lag_order, data = data_ta_transformasi)
granger_results[[paste(var_y, "->", var_x)]] <- granger_yx
}
# Tampilkan hasil uji Granger untuk setiap pasangan
for (result in names(granger_results)) {
cat("Hasil Granger Causality untuk pasangan:", result, "\n")
print(granger_results[[result]])
cat("\n\n")
}
# Tentukan ukuran data train (80% data awal)
train_size <- floor(0.8 * nrow(data_ta_transformasi))
# Bagi data menjadi data train dan data test
data_train <- data_ta_transformasi[1:train_size, ]
data_test <- data_ta_transformasi[(train_size + 1):nrow(data_ta_transformasi), ]
# Tampilkan ukuran data train dan data test
cat("Jumlah data train:", nrow(data_train), "\n")
cat("Jumlah data test:", nrow(data_test), "\n")
# Konversi data ke format time series
data_ts <- ts(data_train[, c("TS", "PRECTOTCORR", "WS10M")],
start = c(2020, 1),  # Tahun dan hari awal
frequency = 365)    # Frekuensi harian (365 hari dalam setahun)
# Panggil library ggplot2 dan forecast untuk plotting
library(ggplot2)
library(forecast)
# Plot time series menggunakan autoplot
autoplot(data_ts, facets = TRUE) +
labs(title = "TS, PRECTOTCORR, and WS10M Time Series",
x = "Time", y = "Value") +
theme_minimal()
# Buat dataframe baru tanpa kolom Tahun
data_train <- data_train[, !(names(data_ta) %in% c("Tahun"))]
library(vars)
vars::VARselect(data_ts, lag.max = 15, type = "const")
VP5C <- vars::VAR(data_ts, p=5, type = "const")
# Forecasting
forecast_VP5C <- forecast(VP5C, h = 219+270)
forecast_VP5C_df <- data.frame(
TS = forecast_VP5C$forecast$TS,
PRECTOTCORR = forecast_VP5C$forecast$PRECTOTCORR,
WS10M = forecast_VP5C$forecast$WS10M
)
# Library tambahan
library(ggplot2)
# Forecast TS
forecast_TS <- data.frame(
Time = time(forecast_VP5C$forecast$TS$mean),
Forecast = forecast_VP5C$forecast$TS$mean,
Lower = forecast_VP5C$forecast$TS$lower[, 2],
Upper = forecast_VP5C$forecast$TS$upper[, 2]
)
# Plot forecast TS
ggplot(forecast_TS, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "blue", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "blue") +
labs(title = "Forecast for TS", x = "Time", y = "Value") +
theme_minimal()
# Forecast PRECTOTCORR
forecast_PRECTOTCORR <- data.frame(
Time = time(forecast_VP5C$forecast$PRECTOTCORR$mean),
Forecast = forecast_VP5C$forecast$PRECTOTCORR$mean,
Lower = forecast_VP5C$forecast$PRECTOTCORR$lower[, 2],
Upper = forecast_VP5C$forecast$PRECTOTCORR$upper[, 2]
)
# Plot forecast PRECTOTCORR
ggplot(forecast_PRECTOTCORR, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "green", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "green") +
labs(title = "Forecast for PRECTOTCORR", x = "Time", y = "Value") +
theme_minimal()
# Forecast WS10M
forecast_WS10M <- data.frame(
Time = time(forecast_VP5C$forecast$WS10M$mean),
Forecast = forecast_VP5C$forecast$WS10M$mean,
Lower = forecast_VP5C$forecast$WS10M$lower[, 2],
Upper = forecast_VP5C$forecast$WS10M$upper[, 2]
)
# Plot forecast WS10M
ggplot(forecast_WS10M, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "red", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "red") +
labs(title = "Forecast for WS10M", x = "Time", y = "Value") +
theme_minimal()
library(vars)
vars::VARselect(data_ts, lag.max = 15, type = "const",season = 365)
VP5C <- vars::VAR(data_ts, p=5, type = "const",season = 365)
# Forecasting
forecast_VP5C <- forecast(VP5C, h = 219+270)
forecast_VP5C_df <- data.frame(
TS = forecast_VP5C$forecast$TS,
PRECTOTCORR = forecast_VP5C$forecast$PRECTOTCORR,
WS10M = forecast_VP5C$forecast$WS10M
)
# Library tambahan
library(ggplot2)
# Forecast TS
forecast_TS <- data.frame(
Time = time(forecast_VP5C$forecast$TS$mean),
Forecast = forecast_VP5C$forecast$TS$mean,
Lower = forecast_VP5C$forecast$TS$lower[, 2],
Upper = forecast_VP5C$forecast$TS$upper[, 2]
)
# Plot forecast TS
ggplot(forecast_TS, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "blue", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "blue") +
labs(title = "Forecast for TS", x = "Time", y = "Value") +
theme_minimal()
# Forecast PRECTOTCORR
forecast_PRECTOTCORR <- data.frame(
Time = time(forecast_VP5C$forecast$PRECTOTCORR$mean),
Forecast = forecast_VP5C$forecast$PRECTOTCORR$mean,
Lower = forecast_VP5C$forecast$PRECTOTCORR$lower[, 2],
Upper = forecast_VP5C$forecast$PRECTOTCORR$upper[, 2]
)
# Plot forecast PRECTOTCORR
ggplot(forecast_PRECTOTCORR, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "green", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "green") +
labs(title = "Forecast for PRECTOTCORR", x = "Time", y = "Value") +
theme_minimal()
# Forecast WS10M
forecast_WS10M <- data.frame(
Time = time(forecast_VP5C$forecast$WS10M$mean),
Forecast = forecast_VP5C$forecast$WS10M$mean,
Lower = forecast_VP5C$forecast$WS10M$lower[, 2],
Upper = forecast_VP5C$forecast$WS10M$upper[, 2]
)
# Plot forecast WS10M
ggplot(forecast_WS10M, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "red", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "red") +
labs(title = "Forecast for WS10M", x = "Time", y = "Value") +
theme_minimal()
# Pastikan data_test sesuai format
data_test_ts <- ts(data_test[, c("TS", "PRECTOTCORR", "WS10M")],
start = c(2020 + (nrow(data_train) / 365), 1),
frequency = 365)
# Forecast TS dan bandingkan dengan data test
forecast_TS <- data.frame(
Time = time(forecast_VP5C$forecast$TS$mean),
Forecast = forecast_VP5C$forecast$TS$mean,
Lower = forecast_VP5C$forecast$TS$lower[, 2],
Upper = forecast_VP5C$forecast$TS$upper[, 2],
Actual = data_test_ts[, "TS"]
)
# Potong data_test_ts agar panjangnya sama dengan panjang forecast
data_test_trimmed <- window(data_test_ts, start = start(data_test_ts), end = start(data_test_ts) + (length(forecast_VP5C$forecast$TS$mean) - 1) / 365)
# Forecast TS dan bandingkan dengan data test
forecast_TS <- data.frame(
Time = time(forecast_VP5C$forecast$TS$mean),
Forecast = forecast_VP5C$forecast$TS$mean,
Lower = forecast_VP5C$forecast$TS$lower[, 2],
Upper = forecast_VP5C$forecast$TS$upper[, 2],
Actual = data_test_trimmed[, "TS"]
)
library(vars)
vars::VARselect(data_ts, lag.max = 15, type = "const")
VP5C <- vars::VAR(data_ts, p=5, type = "const",)
# Forecasting
forecast_VP5C <- forecast(VP5C, h = 219+270)
forecast_VP5C_df <- data.frame(
TS = forecast_VP5C$forecast$TS,
PRECTOTCORR = forecast_VP5C$forecast$PRECTOTCORR,
WS10M = forecast_VP5C$forecast$WS10M
)
# Library tambahan
library(ggplot2)
# Forecast TS
forecast_TS <- data.frame(
Time = time(forecast_VP5C$forecast$TS$mean),
Forecast = forecast_VP5C$forecast$TS$mean,
Lower = forecast_VP5C$forecast$TS$lower[, 2],
Upper = forecast_VP5C$forecast$TS$upper[, 2]
)
# Plot forecast TS
ggplot(forecast_TS, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "blue", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "blue") +
labs(title = "Forecast for TS", x = "Time", y = "Value") +
theme_minimal()
# Forecast PRECTOTCORR
forecast_PRECTOTCORR <- data.frame(
Time = time(forecast_VP5C$forecast$PRECTOTCORR$mean),
Forecast = forecast_VP5C$forecast$PRECTOTCORR$mean,
Lower = forecast_VP5C$forecast$PRECTOTCORR$lower[, 2],
Upper = forecast_VP5C$forecast$PRECTOTCORR$upper[, 2]
)
# Plot forecast PRECTOTCORR
ggplot(forecast_PRECTOTCORR, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "green", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "green") +
labs(title = "Forecast for PRECTOTCORR", x = "Time", y = "Value") +
theme_minimal()
# Forecast WS10M
forecast_WS10M <- data.frame(
Time = time(forecast_VP5C$forecast$WS10M$mean),
Forecast = forecast_VP5C$forecast$WS10M$mean,
Lower = forecast_VP5C$forecast$WS10M$lower[, 2],
Upper = forecast_VP5C$forecast$WS10M$upper[, 2]
)
# Plot forecast WS10M
ggplot(forecast_WS10M, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "red", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "red") +
labs(title = "Forecast for WS10M", x = "Time", y = "Value") +
theme_minimal()
library(vars)
vars::VARselect(data_ts, lag.max = 15, type = "const",season = 365)
library(vars)
vars::VARselect(data_ts, lag.max = 15, type = "const",season = 365)
VP5C <- vars::VAR(data_ts, p=5, type = "const",season = 365)
# Forecasting
forecast_VP5C <- forecast(VP5C, h = 219+270)
forecast_VP5C_df <- data.frame(
TS = forecast_VP5C$forecast$TS,
PRECTOTCORR = forecast_VP5C$forecast$PRECTOTCORR,
WS10M = forecast_VP5C$forecast$WS10M
)
# Library tambahan
library(ggplot2)
# Forecast TS
forecast_TS <- data.frame(
Time = time(forecast_VP5C$forecast$TS$mean),
Forecast = forecast_VP5C$forecast$TS$mean,
Lower = forecast_VP5C$forecast$TS$lower[, 2],
Upper = forecast_VP5C$forecast$TS$upper[, 2]
)
# Plot forecast TS
ggplot(forecast_TS, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "blue", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "blue") +
labs(title = "Forecast for TS", x = "Time", y = "Value") +
theme_minimal()
# Forecast PRECTOTCORR
forecast_PRECTOTCORR <- data.frame(
Time = time(forecast_VP5C$forecast$PRECTOTCORR$mean),
Forecast = forecast_VP5C$forecast$PRECTOTCORR$mean,
Lower = forecast_VP5C$forecast$PRECTOTCORR$lower[, 2],
Upper = forecast_VP5C$forecast$PRECTOTCORR$upper[, 2]
)
# Plot forecast PRECTOTCORR
ggplot(forecast_PRECTOTCORR, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "green", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "green") +
labs(title = "Forecast for PRECTOTCORR", x = "Time", y = "Value") +
theme_minimal()
# Forecast WS10M
forecast_WS10M <- data.frame(
Time = time(forecast_VP5C$forecast$WS10M$mean),
Forecast = forecast_VP5C$forecast$WS10M$mean,
Lower = forecast_VP5C$forecast$WS10M$lower[, 2],
Upper = forecast_VP5C$forecast$WS10M$upper[, 2]
)
# Plot forecast WS10M
ggplot(forecast_WS10M, aes(x = Time)) +
geom_line(aes(y = Forecast), color = "red", size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2, fill = "red") +
labs(title = "Forecast for WS10M", x = "Time", y = "Value") +
theme_minimal()
